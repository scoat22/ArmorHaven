#ifndef NOISE_FUNC
#define NOISE_FUNC

float2 grad( int2 z )  // replace this anything that returns a random vector
{
    // 2D to 1D  (feel free to replace by some other)
    int n = z.x+z.y*11111;

    // Hugo Elias hash (feel free to replace by another one)
    n = (n<<13)^n;
    n = (n*(n*n*15731+789221)+1376312589)>>16;

#if 0

    // simple random vectors
    return float2(cos(float(n)),sin(float(n)));
    
#else

    // Perlin style vectors
    n &= 7;
    float2 gr = float2(n&1,n>>1)*2.0-1.0;
    return ( n>=6 ) ? float2(0.0,gr.x) : 
           ( n>=4 ) ? float2(gr.x,0.0) :
                              gr;
#endif                              
}

float noise( in float2 p )
{
    int2 i = int2(floor( p ));
     float2 f =       frac( p );
	
	float2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead

    return lerp( lerp( dot( grad( i+int2(0,0) ), f-float2(0.0,0.0) ), 
                     dot( grad( i+int2(1,0) ), f-float2(1.0,0.0) ), u.x),
                lerp( dot( grad( i+int2(0,1) ), f-float2(0.0,1.0) ), 
                     dot( grad( i+int2(1,1) ), f-float2(1.0,1.0) ), u.x), u.y);
}

// ----------

#endif